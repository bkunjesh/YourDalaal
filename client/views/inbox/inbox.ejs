<% layout('/layouts/boilerplate') %>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<link rel="stylesheet" href="/stylesheet/inbox.css">

<input type="hidden" value="<%= receiverID %>" id="receiverID" name="receiverID" >
<input type="hidden" value="<%= userID %>" id="userID" name="userID" >
<input type="hidden" value="<%= chatID %>" id="chatID" name="chatID" >
<div id="chat-container">
    <div id="search-container">
        <a href="/yourdalaal/inbox" >
            <header><strong>Inbox</strong></header>
        </a>
    </div>
    
    <div id="conversation-list">
        <% for(let item of conversationList){ %> 
                <a href="/yourdalaal/inbox/<%=item.receiverId%>" data-receiver-id="<%=item.receiverId%>">
                <div class="conversation" data-receiver-id="<%=item.receiverId%>">
                    
                    <img src='<%=item.profileImage%>'/>
                    <div class="title-text">
                        <span class="title-text-status">&#128994</span>
                        <%=item.receiverName%>
                    </div>
                    <div class="created-date"><%=item.updatedAt%></div>
                    <div class="conversation-message">
                        <%=item.recent_message%>
                    </div>
                    <% if(item.unReadCount>0){ %> 
                        <div class="unReadCount-message"><%=item.unReadCount%></div>
                        <% } %> 
                    </div>
                </a>
        <% } %> 
    </div>

    

    <% if(receiverID ===''){ %> 
            <div class="text-muted justify-content-center" id="chat-message-list" style="margin: 30px;">
                <p><strong>Select a Chat to Start Messaging</strong></p>
            </div>
    <% }else{ %> 
            <div id="chat-title">
                <span>
                    <%=receiver.username%>
                </span>
                <div id="online-status">
                    <p id="online-status-text">offline</p>
                </div>
            </div>
            <div id="chat-message-list">
                <% var date="-1" %> 
                <% for(let item of conversation){ %> 
                    <% if(item.message_date!=""&&date!=item.message_date){ date=item.message_date; %> 
                        <div id="chat-message-list-date">
                            <span>
                                <%= item.message_date %>
                            </span>
                        </div>
                        
                    <% } %> 
                    <div class="message-row <%=item.message_class%>">
                        <div class="message-content">
                            <% var userProfileImage = (receiver.profileImage.url) ? receiver.profileImage.url : 'https:img.icons8.com/metro/26/000000/user-male.png';
                            if(item.message_class=="other-message"){%>
                                <img src= <%=userProfileImage%> alt="<%=receiver.username%>" />
                            <%} %> 
                            <div class="message-text"><%=item.message_text%></div>
                            <div class="message-time"><%=item.message_time%></div>
                        </div>
                    </div>
                <% } %> 
            </div>

                <div id="chat-form" >
                    <input type="text" name="message" placeholder="type a message" id="message-text"/>
                    <button id="send_message">
                        <img src="https://img.icons8.com/fluent/48/000000/filled-sent.png" alt="Add Attachment" />
                    </button>
                </div>
    <% } %> 
</div>


<script>
{
    var socket = io.connect();
    const conversationlist = document.querySelector('#conversation-list');
    const chat_list = document.querySelector('#chat-title');
    const chat_message_list = document.querySelector('#chat-message-list');
    const receiverID = document.querySelector('#receiverID').value;
    const send_message = document.querySelector('#send_message');
    const chatID = document.querySelector('#chatID').value;
    const userID = document.querySelector('#userID').value;
        
    showActiveChat();
    connectSocket();
    
    function connectSocket(){
        socket.emit('join', { id: userID });
    }

    if (send_message) {
        send_message.addEventListener("click", async function () {
            const message_text = document.querySelector('#message-text').value;
            if (receiverID != '' && isvalidmessage(message_text)) {
                // let date=new Date();
                let data = { message_text: message_text, receiverID: receiverID, chatID: chatID};
                
                axios.post(`/yourdalaal/inbox/sendMessage`, data, { headers: { "Content-Type": "application/json" } })
                    .then((res) => {
                        let date_ = new Date();
                        let{date,time}= getUpdatedDate(date_);
                        chat_message_list.innerHTML +=
                            `
                <div class="message-row you-message">
                    <div class="message-content">
                        <div class="message-text">${message_text}</div>
                        <div class="message-time">${time}</div>
                    </div>
                </div>    
            `
                        scrollDown();
                        document.querySelector('#message-text').value = '';

                        conversations = document.querySelectorAll(".conversation");
                        var node;
                        conversations.forEach((element) => {
                            if (element.dataset.receiverId == receiverID) {
                                recentMessage = element.querySelector(".conversation-message")
                                messegeDate = element.querySelector(".created-date")
                                node = element;
                                recentMessage.textContent = message_text;
                                messegeDate.textContent=date;
                            }

                        });
                        if (node) {
                            updateConversationList(node);
                        }

                    })
                    .catch((err) => {
                        console.log(err);
                    })

            }
        });
    }


    socket.on('message', function (data) {
        if (receiverID === data.senderId.toString()) {

            readAcknowledge = {chatID:chatID};
            socket.emit('readAcknowledge', readAcknowledge);

            chat_message_list.innerHTML +=
                `
            <div class="message-row other-message">
                <div class="message-content">
                    <img src=${data.profileImage} />
                    <div class="message-text">
                        ${data.message_text}
                    </div>
                    <div class="message-time">${data.message_time}</div>
                </div>
            </div>  
        `
        }
        messageArrived(data);
        
        scrollDown();
    })


    function messageArrived(data)
    {
        conversations=document.querySelectorAll(".conversation");
        var node;
        conversations.forEach((element)=> {
            recentMessage=element.querySelector(".conversation-message")
            
            if(element.dataset.receiverId == data.senderId.toString()){
                node=element;
                recentMessage.textContent=data.message_text;
                unread=element.querySelector(".unReadCount-message")
                if(unread&& receiverID != data.senderId.toString())
                {
                    unread.textContent=parseInt(unread.textContent)+1;
                }
                else if(receiverID != data.senderId.toString())
                {
                    element.innerHTML += `
                        <div class="unReadCount-message">1</div>
                    `
                }
            }
            
        });
        if(node)
        {
            updateConversationList(node);
        }else{
            conversationlist.innerHTML = `
                <a href="/yourdalaal/inbox/${data.senderId}" data-receiver-id="${data.senderId}">
                    <div class="conversation" data-receiver-id="${data.senderId}">
                        <img src='${data.profileImage}'/>
                        <div class="title-text">${data.senderUsername}</div>
                        <div class="created-date">${data.message_date}</div>
                        <div class="conversation-message">
                            ${data.message_text}
                        </div>
                        <div class="unReadCount-message">1</div>
                    </div>
                    </a>
                `+ conversationlist.innerHTML;
        }
    }

    function updateConversationList(node)
    {
        if (node) {
            node = node.parentNode;
            parent = node.parentNode;
            parent.removeChild(node);
            parent.insertBefore(node, parent.firstChild)
        }
    }

    socket.on('online',function(data){
        if(data.connecteduser[receiverID])
        {
            const online_status_text = document.querySelector('#online-status-text');
            if (online_status_text) {
                online_status_text.innerHTML = " &#128994 online";
            }
        }
        conversations = document.querySelectorAll(".conversation");
        var node;
        conversations.forEach((element) => {
            if(data.connecteduser[element.dataset.receiverId])
            {
                titleText = element.querySelector(".title-text").querySelector(".title-text-status");

                titleText.style.display="inline";
            }
        });
        // console.log(data.connecteduser[receiverID]);
    })
    socket.on('offline',function(data){
        if(!data.connecteduser[receiverID])
        {
            const online_status_text = document.querySelector('#online-status-text');
            if (online_status_text) {
                online_status_text.innerHTML = "offline";
            }
        }
        conversations = document.querySelectorAll(".conversation");
        var node;
        conversations.forEach((element) => {
            if (!data.connecteduser[element.dataset.receiverId]) {
                titleText = element.querySelector(".title-text").querySelector(".title-text-status");

                titleText.style.display = "none";

            }
        });
    })
    
    function getUpdatedDate(date) {
        //https://stackoverflow.com/questions/27012854/change-iso-date-string-to-date-object-javascript
        function isoFormatDMY(d) {
            function pad(n) {
                return (n < 10 ? "0" : "") + n;
            }
            return (
                pad(d.getDate()) +
                "/" +
                pad(d.getMonth() + 1) +
                "/" +
                d.getFullYear()
            );
        }
        function getTime(date) {
            let time = date.toLocaleTimeString("en-US");
            var b = time.split(":");
            var c = b[2].split(" ");
            return b[0] + ":" + b[1] + ":" + c[1];
        }
        time = getTime(date);
        date = isoFormatDMY(date);
        return { date, time };
    }

    scrollDown();
    function scrollDown() {
        const chat_message_list = document.querySelector('#chat-message-list');
        chat_message_list.scrollTop = chat_message_list.scrollHeight;
    }
    function isvalidmessage(message_text) {
        if (message_text.length > 0)
            for (let ch of message_text) {
                if (ch != ' ') return 1;
            }
        return 0;
    }
    function showActiveChat()
    {
        if (receiverID) {
            conversations = document.querySelectorAll(".conversation");
            conversations.forEach((element) => {

                if (element.dataset.receiverId == receiverID.toString()) {
                    element.classList.add('active');
                }
            });
        }
    }

}
</script>
